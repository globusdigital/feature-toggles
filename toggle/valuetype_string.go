// Code generated by "stringer -type ValueType,ConditionOp,FieldOp,kind -linecomment ./toggle"; DO NOT EDIT.

package toggle

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IntType-0]
	_ = x[FloatType-1]
	_ = x[BoolType-2]
	_ = x[StringType-3]
}

const _ValueType_name = "intfloatboolstring"

var _ValueType_index = [...]uint8{0, 3, 8, 12, 18}

func (i ValueType) String() string {
	if i < 0 || i >= ValueType(len(_ValueType_index)-1) {
		return "ValueType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ValueType_name[_ValueType_index[i]:_ValueType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AndOp-0]
	_ = x[OrOp-1]
	_ = x[invalidConditionalOp-2]
}

const _ConditionOp_name = "&&||err"

var _ConditionOp_index = [...]uint8{0, 2, 4, 7}

func (i ConditionOp) String() string {
	if i < 0 || i >= ConditionOp(len(_ConditionOp_index)-1) {
		return "ConditionOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ConditionOp_name[_ConditionOp_index[i]:_ConditionOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EqOp-0]
	_ = x[NeOp-1]
	_ = x[LtOp-2]
	_ = x[GtOp-3]
	_ = x[invalidFieldOp-4]
}

const _FieldOp_name = "=!=<>err"

var _FieldOp_index = [...]uint8{0, 1, 3, 4, 5, 8}

func (i FieldOp) String() string {
	if i < 0 || i >= FieldOp(len(_FieldOp_index)-1) {
		return "FieldOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FieldOp_name[_FieldOp_index[i]:_FieldOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ident-0]
	_ = x[intLit-1]
	_ = x[floatLit-2]
	_ = x[boolLit-3]
	_ = x[stringLit-4]
	_ = x[andOp-5]
	_ = x[orOp-6]
	_ = x[eqOp-7]
	_ = x[neOp-8]
	_ = x[ltOp-9]
	_ = x[gtOp-10]
	_ = x[openParen-11]
	_ = x[closeParen-12]
}

const _kind_name = "identifierintegerfloatbooleanstring&& operator|| operator== operator!= operator< operator> operator()"

var _kind_index = [...]uint8{0, 10, 17, 22, 29, 35, 46, 57, 68, 79, 89, 99, 100, 101}

func (i kind) String() string {
	if i < 0 || i >= kind(len(_kind_index)-1) {
		return "kind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _kind_name[_kind_index[i]:_kind_index[i+1]]
}
