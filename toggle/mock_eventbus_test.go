// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/globusdigital/feature-toggles/toggle (interfaces: EventBus)

// Package toggle_test is a generated GoMock package.
package toggle_test

import (
	context "context"
	toggle "github.com/globusdigital/feature-toggles/toggle"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventBus is a mock of EventBus interface
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// Receiver mocks base method
func (m *MockEventBus) Receiver(arg0 context.Context) <-chan toggle.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receiver", arg0)
	ret0, _ := ret[0].(<-chan toggle.Event)
	return ret0
}

// Receiver indicates an expected call of Receiver
func (mr *MockEventBusMockRecorder) Receiver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receiver", reflect.TypeOf((*MockEventBus)(nil).Receiver), arg0)
}
